{
  "name": "Nightly Sheet â†’ Postgres Upsert",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyDay",
              "hour": 23
            }
          ]
        }
      },
      "id": "Cron",
      "name": "Cron 23:00 IST",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "operation": "read",
        "sheetId": "",
        "range": "TransactionsRaw",
        "options": {
          "returnAll": true
        }
      },
      "id": "Read Sheet",
      "name": "Google Sheets - Read All",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [520, 200],
      "credentials": {
        "googleSheetsOAuth2Api": "Google Sheets OAuth"
      }
    },
    {
      "parameters": {
        "functionCode": "const tz = 'Asia/Kolkata';\nconst now = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));\nconst yyyy = now.getFullYear();\nconst mm = String(now.getMonth() + 1).padStart(2, '0');\nconst dd = String(now.getDate()).padStart(2, '0');\nconst today = `${yyyy}-${mm}-${dd}`;\nreturn $input.all().map(item => {\n  const j = item.json;\n  const amt = Number(String(j.amount).replace(/[ ,]/g, ''));\n  const dateStr = String(j.txn_date || '').trim();\n  let isoDate = dateStr;\n  const m = dateStr.match(/^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/);\n  if (m) isoDate = `${m[3]}-${m[2]}-${m[1]}`;\n  return { json: { ...j, amount: isNaN(amt) ? null : amt, txn_date: isoDate, is_today: isoDate === today } };\n}).filter(i => i.json.is_today && i.json.amount !== null);"
      },
      "id": "Filter Today",
      "name": "Function - Filter Today's Rows",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [840, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH me AS (\n  INSERT INTO users (name, username, email)\n  VALUES (\n    COALESCE({{$env(\"PF_USER_NAME\")}}, 'User'),\n    SPLIT_PART({{$env(\"PF_USER_EMAIL\")}}, '@', 1),\n    {{$env(\"PF_USER_EMAIL\")}}\n  )\n  ON CONFLICT (email)\n  DO UPDATE SET name = EXCLUDED.name\n  RETURNING id\n), u AS (\n  SELECT id FROM me\n  UNION ALL\n  SELECT id FROM users WHERE email = {{$env(\"PF_USER_EMAIL\")}} AND NOT EXISTS (SELECT 1 FROM me)\n), acct AS (\n  INSERT INTO accounts (user_id, name, type, currency, balance)\n  SELECT (SELECT id FROM u),\n         COALESCE({{$json[\"account_name\"]}}, 'Default Account'),\n         CASE WHEN {{$json[\"type\"]}} = 'income' THEN 'bank' ELSE 'bank' END,\n         COALESCE({{$json[\"currency\"]}}, 'INR'),\n         COALESCE({{$json[\"balance_after\"]}}, 0)\n  WHERE NOT EXISTS (\n    SELECT 1 FROM accounts a\n    WHERE a.user_id = (SELECT id FROM u)\n      AND a.name = COALESCE({{$json[\"account_name\"]}}, 'Default Account')\n  )\n  RETURNING id\n), a AS (\n  SELECT id FROM acct\n  UNION ALL\n  SELECT id FROM accounts\n  WHERE name = COALESCE({{$json[\"account_name\"]}}, 'Default Account')\n    AND user_id = (SELECT id FROM u)\n  LIMIT 1\n), cat AS (\n  INSERT INTO categories (user_id, name, type)\n  SELECT (SELECT id FROM u), 'Uncategorized', {{$json[\"type\"]}}\n  WHERE NOT EXISTS (\n    SELECT 1 FROM categories c\n    WHERE c.user_id = (SELECT id FROM u)\n      AND c.name = 'Uncategorized'\n      AND c.type = {{$json[\"type\"]}}\n  )\n  RETURNING id\n), c AS (\n  SELECT id FROM cat\n  UNION ALL\n  SELECT id FROM categories\n  WHERE user_id = (SELECT id FROM u)\n    AND name = 'Uncategorized'\n    AND type = {{$json[\"type\"]}}\n  LIMIT 1\n), b AS (\n  INSERT INTO batches (user_id, source, notes)\n  SELECT (SELECT id FROM u), 'gmail-canara', 'Automated import from n8n'\n  RETURNING id\n), possible_duplicate AS (\n  SELECT t.id\n  FROM transactions t\n  WHERE t.user_id = (SELECT id FROM u)\n    AND t.account_id = (SELECT id FROM a)\n    AND t.amount = {{$json[\"amount\"]}}\n    AND t.type = {{$json[\"type\"]}}\n    AND t.txn_date = {{$json[\"txn_date\"]}}\n    AND t.description = {{$json[\"subject\"]}}\n  LIMIT 1\n), ins AS (\n  INSERT INTO transactions (\n    user_id, account_id, amount, type, category_id, description, notes, tags,\n    is_recurring, status, txn_date, attachment_url, batch_id\n  )\n  SELECT (SELECT id FROM u), (SELECT id FROM a), {{$json[\"amount\"]}}, {{$json[\"type\"]}},\n         (SELECT id FROM c), {{$json[\"subject\"]}}, {{$json[\"raw_snippet\"]}}, NULL,\n         FALSE, 'posted', {{$json[\"txn_date\"]}}, NULL, (SELECT id FROM b)\n  WHERE NOT EXISTS (SELECT 1 FROM possible_duplicate)\n  RETURNING id\n)\nSELECT COALESCE((SELECT id FROM ins), (SELECT id FROM possible_duplicate)) AS txn_id;"
      },
      "id": "PG Upsert",
      "name": "Postgres - Upsert",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1160, 200],
      "credentials": {
        "postgres": "Postgres Local"
      }
    }
  ],
  "connections": {
    "Cron 23:00 IST": {
      "main": [
        [
          {
            "node": "Google Sheets - Read All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets - Read All": {
      "main": [
        [
          {
            "node": "Function - Filter Today's Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Filter Today's Rows": {
      "main": [
        [
          {
            "node": "Postgres - Upsert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}


