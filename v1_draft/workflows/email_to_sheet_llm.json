{
  "name": "Email → LLM Parse → Sheet (Generic)",
  "nodes": [
    {"parameters": {"resource": "message", "operation": "watch", "additionalFields": {"query": "subject:(Transaction) OR subject:(Alert)"}}, "id": "Gmail Trigger", "name": "Gmail Trigger", "type": "n8n-nodes-base.gmailTrigger", "typeVersion": 1, "position": [200, 200], "credentials": {"gmailOAuth2": "Gmail OAuth2"}},
    {"parameters": {"mode": "raw", "model": "gpt-4o-mini", "options": {"responseFormat": "json"}, "systemMessage": "={{$json[\"system_prompt\"]}}", "text": "={{$json[\"user_prompt\"]}}"}, "id": "OpenAI", "name": "OpenAI - Extract", "type": "n8n-nodes-base.openAi", "typeVersion": 5, "position": [520, 200], "credentials": {"openAiApi": "OpenAI API"}},
    {"parameters": {"functionCode": "// Build prompts from files and current email\nconst system = $json.system || $json.system_prompt || $binary?.system?.data?.toString() || `See prompts/llm-system.txt`;\nconst user = $json.user || $json.user_prompt || '';\nreturn [{ json: { system_prompt: system, user_prompt: user } }];"}, "id": "Build Prompts", "name": "Function - Build Prompts", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [360, 200]},
    {"parameters": {"functionCode": "// Attach raw email fields into user prompt template\nconst body = $json.text || $json.body || '';\nconst tpl = `Extract transaction data from this email. Return JSON only.\n\nEmail metadata:\n- From: {{From}}\n- Subject: {{Subject}}\n- Snippet: {{snippet}}\n- Body (may be empty): {{body}}\n\nRules:\n- Parse amounts and currency\n- Determine CREDITED or DEBITED and map to type\n- Extract account masked digits if present\n- Parse transaction date (YYYY-MM-DD)\n- Extract bank name\n- If unsure, set field null and lower confidence`;\nconst filled = tpl\n  .replace('{{From}}', $json.From || $json.from || '')\n  .replace('{{Subject}}', $json.Subject || $json.subject || '')\n  .replace('{{snippet}}', ($json.snippet || '').slice(0, 2000))\n  .replace('{{body}}', String(body).slice(0, 4000));\nreturn [{ json: { user_prompt: filled, system_prompt: `You are a financial transaction email parser. Output JSON only.` } }];"}, "id": "Make User Prompt", "name": "Function - Make User Prompt", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [360, 350]},
    {"parameters": {"functionCode": "// Combine prompts and call OpenAI node afterwards\nconst system_prompt = $items(0, 1)[1]?.json?.system_prompt || $json.system_prompt;\nconst user_prompt = $items(0, 1)[1]?.json?.user_prompt || $json.user_prompt;\nreturn [{ json: { system_prompt, user_prompt } }];"}, "id": "Join Prompts", "name": "Function - Join", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [520, 350]},
    {"parameters": {"functionCode": "// Validate and coerce LLM result\n/* paste from parsers/postprocess-llm.js if not using external file */\nfunction toIsoDate(dateStr){if(!dateStr)return null;const s=String(dateStr).trim();const ymd=s.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);if(ymd)return `${ymd[1]}-${ymd[2]}-${ymd[3]}`;const dmy=s.match(/^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/);if(dmy)return `${dmy[3]}-${dmy[2]}-${dmy[1]}`;return null;}function toNumber(val){if(val===null||val===undefined)return null;const n=Number(String(val).replace(/[ ,]/g,''));return isNaN(n)?null:n;}const tz='Asia/Kolkata';const now=new Date(new Date().toLocaleString('en-US',{timeZone:tz}));const isoTimestamp=now.toISOString();return $input.all().map(item=>{const j=item.json||{};let parsed=j.data||j.response||j.ai_json||null;if(typeof parsed==='string'){try{parsed=JSON.parse(parsed);}catch(e){parsed=null;}}const bank=parsed?.bank??null;const amount=toNumber(parsed?.amount);const currency=(parsed?.currency||'INR').toUpperCase();const direction=parsed?.direction?String(parsed.direction).toUpperCase():null;const type=parsed?.type??(direction==='CREDITED'?'income':(direction==='DEBITED'?'expense':null));const txn_date=toIsoDate(parsed?.txn_date);const account_mask=parsed?.account_mask??null;const account_name=parsed?.account_name||(bank&&account_mask?`${bank} - XXXX${account_mask}`:(bank||'Bank Account'));const balance_after=toNumber(parsed?.balance_after);const description=parsed?.description??null;const confidence=typeof parsed?.confidence==='number'?Math.max(0,Math.min(1,parsed.confidence)):0.5;return {json:{timestamp:isoTimestamp,bank,account_name,account_mask,amount,currency,direction,type,txn_date,balance_after,source_email:j.From||j.from||null,subject:j.Subject||j.subject||null,message_id:j.id||j.messageId||null,thread_id:j.threadId||null,raw_snippet:j.snippet||j.body||'',description,ai_confidence:confidence}};});"}, "id": "Postprocess", "name": "Function - Postprocess LLM", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [840, 200]},
    {"parameters": {"operation": "append", "sheetId": "", "range": "TransactionsRaw", "options": {"valueInputMode": "RAW"}, "keyRow": 1}, "id": "Append Sheet", "name": "Google Sheets - Append", "type": "n8n-nodes-base.googleSheets", "typeVersion": 4, "position": [1160, 200], "credentials": {"googleSheetsOAuth2Api": "Google Sheets OAuth"}}
  ],
  "connections": {
    "Gmail Trigger": {"main": [[{"node": "Function - Make User Prompt", "type": "main", "index": 0}, {"node": "Function - Build Prompts", "type": "main", "index": 0}]]},
    "Function - Build Prompts": {"main": [[{"node": "Function - Join", "type": "main", "index": 0}]]},
    "Function - Join": {"main": [[{"node": "OpenAI - Extract", "type": "main", "index": 0}]]},
    "OpenAI - Extract": {"main": [[{"node": "Function - Postprocess LLM", "type": "main", "index": 0}]]},
    "Function - Postprocess LLM": {"main": [[{"node": "Google Sheets - Append", "type": "main", "index": 0}]]}
  }
}


