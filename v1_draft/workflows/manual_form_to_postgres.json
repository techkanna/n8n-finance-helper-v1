{
  "name": "Manual Form â†’ Postgres Upsert",
  "nodes": [
    {"parameters": {"path": "manual-transaction", "options": {"responseData": "={{$json}}"}}, "id": "Webhook", "name": "Webhook (POST)", "type": "n8n-nodes-base.webhook", "typeVersion": 2, "position": [200, 200] },
    {"parameters": {"functionCode": "// Validate and normalize body\nconst j = $json;\nfunction toIso(d){if(!d)return null;const s=String(d);const m=s.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);return m?`${m[1]}-${m[2]}-${m[3]}`:null;}\nfunction num(x){const n=Number(String(x).replace(/[ ,]/g,''));return isNaN(n)?null:n;}\nconst amount = num(j.amount);\nconst txn_date = toIso(j.txn_date);\nconst allowed = ['income','expense','transfer'];\nif (!j.user_email) throw new Error('user_email required');\nif (!j.account_name) throw new Error('account_name required');\nif (!amount) throw new Error('valid amount required');\nif (!txn_date) throw new Error('valid txn_date (YYYY-MM-DD) required');\nif (!allowed.includes(j.type)) throw new Error('type must be income|expense|transfer');\nreturn [{ json: { user_email: j.user_email, user_name: j.user_name || null, account_name: j.account_name, currency: (j.currency || 'INR').toUpperCase(), amount, type: j.type, txn_date, category_name: j.category_name || null, description: j.description || null, notes: j.notes || null } }];"}, "id": "Validate", "name": "Function - Validate", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [520, 200]},
    {"parameters": {"operation": "executeQuery", "query": "WITH me AS (\n  INSERT INTO users (name, username, email)\n  VALUES (\n    COALESCE({{$json[\"user_name\"]}}, SPLIT_PART({{$json[\"user_email\"]}}, '@', 1)),\n    SPLIT_PART({{$json[\"user_email\"]}}, '@', 1),\n    {{$json[\"user_email\"]}}\n  )\n  ON CONFLICT (email)\n  DO UPDATE SET name = EXCLUDED.name\n  RETURNING id\n), u AS (\n  SELECT id FROM me\n  UNION ALL\n  SELECT id FROM users WHERE email = {{$json[\"user_email\"]}} AND NOT EXISTS (SELECT 1 FROM me)\n), acct AS (\n  INSERT INTO accounts (user_id, name, type, currency)\n  SELECT (SELECT id FROM u),\n         COALESCE({{$json[\"account_name\"]}}, 'Manual Account'),\n         'bank',\n         COALESCE({{$json[\"currency\"]}}, 'INR')\n  WHERE NOT EXISTS (\n    SELECT 1 FROM accounts a\n    WHERE a.user_id = (SELECT id FROM u)\n      AND a.name = COALESCE({{$json[\"account_name\"]}}, 'Manual Account')\n  )\n  RETURNING id\n), a AS (\n  SELECT id FROM acct\n  UNION ALL\n  SELECT id FROM accounts\n  WHERE name = COALESCE({{$json[\"account_name\"]}}, 'Manual Account')\n    AND user_id = (SELECT id FROM u)\n  LIMIT 1\n), cat AS (\n  INSERT INTO categories (user_id, name, type)\n  SELECT (SELECT id FROM u), COALESCE({{$json[\"category_name\"]}}, 'Uncategorized'), {{$json[\"type\"]}}\n  WHERE NOT EXISTS (\n    SELECT 1 FROM categories c\n    WHERE c.user_id = (SELECT id FROM u)\n      AND c.name = COALESCE({{$json[\"category_name\"]}}, 'Uncategorized')\n      AND c.type = {{$json[\"type\"]}}\n  )\n  RETURNING id\n), c AS (\n  SELECT id FROM cat\n  UNION ALL\n  SELECT id FROM categories\n  WHERE user_id = (SELECT id FROM u)\n    AND name = COALESCE({{$json[\"category_name\"]}}, 'Uncategorized')\n    AND type = {{$json[\"type\"]}}\n  LIMIT 1\n), b AS (\n  INSERT INTO batches (user_id, source, notes)\n  SELECT (SELECT id FROM u), 'manual-form', 'Submitted via n8n Webhook form'\n  RETURNING id\n), possible_duplicate AS (\n  SELECT t.id\n  FROM transactions t\n  WHERE t.user_id = (SELECT id FROM u)\n    AND t.account_id = (SELECT id FROM a)\n    AND t.amount = {{$json[\"amount\"]}}\n    AND t.type = {{$json[\"type\"]}}\n    AND t.txn_date = {{$json[\"txn_date\"]}}\n    AND t.description = {{$json[\"description\"]}}\n  LIMIT 1\n), ins AS (\n  INSERT INTO transactions (\n    user_id, account_id, amount, type, category_id, description, notes,\n    is_recurring, status, txn_date, batch_id\n  )\n  SELECT (SELECT id FROM u), (SELECT id FROM a), {{$json[\"amount\"]}}, {{$json[\"type\"]}},\n         (SELECT id FROM c), {{$json[\"description\"]}}, {{$json[\"notes\"]}},\n         FALSE, 'posted', {{$json[\"txn_date\"]}}, (SELECT id FROM b)\n  WHERE NOT EXISTS (SELECT 1 FROM possible_duplicate)\n  RETURNING id\n)\nSELECT COALESCE((SELECT id FROM ins), (SELECT id FROM possible_duplicate)) AS txn_id;"}, "id": "PG Upsert", "name": "Postgres - Upsert", "type": "n8n-nodes-base.postgres", "typeVersion": 1, "position": [840, 200], "credentials": {"postgres": "Postgres Local"}},
    {"parameters": {"responseBody": "={{ { ok: true, txn_id: $json.txn_id } }}"}, "id": "Respond", "name": "Respond", "type": "n8n-nodes-base.respondToWebhook", "typeVersion": 1, "position": [1080, 200] }
  ],
  "connections": {
    "Webhook (POST)": {"main": [[{"node": "Function - Validate", "type": "main", "index": 0}]]},
    "Function - Validate": {"main": [[{"node": "Postgres - Upsert", "type": "main", "index": 0}]]},
    "Postgres - Upsert": {"main": [[{"node": "Respond", "type": "main", "index": 0}]]}
  }
}


